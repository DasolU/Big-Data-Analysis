I"Y<p>구글링을 통해 이해했다고 생각했는데 막상 코딩테스트에 가면 구현이 어려우셨나요?</p>

<p>저뿐만 아니라 많은 초보자분들이 재귀 방법에서 손에 잡힐 듯 잡히지 않는 느낌을 받는다고 합니다.</p>

<p>그래서 저는 오늘 재귀를 확실히 이해해보려고 합니다.</p>

<h2 id="필요성">필요성</h2>
<p>생각하는대로 손코딩을 하다보면 어느새 같은 기능을 반복해서 적는 구간이 생깁니다.<br />
저는 이럴때마다 recursion(재귀)을 떠올리면서 def recursion을 정의하고 코드를 간결하게 만들려고 합니다.<br />
하지만 재귀 방법 <strong>구현</strong> 경험이 없다보니 error가 생기면서 당황할 일이 많더라구요.</p>

<p>이번 기회에 완벽히 이해해서 앞으로 복잡한 데이터 분석 코드를 작성할 때도 재귀를 에러없이 한 번에 적용할 수 있도록 해보겠습니다.</p>

<h2 id="정의">정의</h2>
<p>Recursion 함수는 결과를 return하기 전에 자기 자신을 호출하는 방법입니다.</p>

<h2 id="구현">구현</h2>
<p>재귀 함수를 작성할 때는 무한 반복을 막기위한 <strong>기본 단계</strong>와 <strong>재귀 단계</strong>를 넣어주면 됩니다.</p>
<h3 id="예시">예시</h3>
<p>새해를 기다리는 카운트다운을 하는 재귀함수를 다음과 같이 나타낼 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">countdown</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>  <span class="c1">#기본 단계
</span>        <span class="k">return</span> <span class="n">i</span>
    <span class="k">else</span><span class="p">:</span>      <span class="c1">#재귀 단계
</span>        <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">countdown</span><span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">countdown</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
</code></pre></div></div>
<h2 id="호출-순서-이해하기">호출 순서 이해하기</h2>

<p>컴퓨터는 재귀 함수를 어떤 방식으로 처리하는 걸까요?</p>

<p>이 질문에 답하기 위해서는 data structure(자료 구조) 중 linear structure(선형 구조)에 속하는 <a href="https://dasolu.github.io/basic/2021/04/15/data-structure-stack.html">stack</a> (스택)에 대한 이해가 필요합니다.</p>

<p>예시의 재귀 함수가 돌아가면 컴퓨터는 <a href="https://dasolu.github.io/basic/2021/04/15/data-structure-stack.html">호출 스택</a> 을 <strong>위쪽 방향으로</strong> 쌓고 가장 위에 있는 것부터 처리합니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">호출 스택이 쌓여있는 모습</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">3 번째 호출</td>
      <td style="text-align: center">countdown(1)</td>
    </tr>
    <tr>
      <td style="text-align: center">2 번째 호출</td>
      <td style="text-align: center">countdown(2)</td>
    </tr>
    <tr>
      <td style="text-align: center">1 번째 호출</td>
      <td style="text-align: center">countdown(3)</td>
    </tr>
  </tbody>
</table>

<p>따라서 <strong>가장 위에 있는 메모리</strong>가 처리됩니다. 즉, countdown(1)이 실행되며 1을 반환하고, 메모리가 제거됩니다.</p>

<p>제거 이후에 호출 스택의 모습은 다음과 같습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">호출 스택이 쌓여있는 모습</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">2 번째 호출</td>
      <td style="text-align: center">countdown(2)</td>
    </tr>
    <tr>
      <td style="text-align: center">1 번째 호출</td>
      <td style="text-align: center">countdown(1)</td>
    </tr>
  </tbody>
</table>

<p>그 다음으로는 가장 위에 있는 countdown(2)가 실행되며 2를 print</p>

<p>에서 변수를 저장한 메모리가 처리되며 1을 반환하고, 메모리가 제거됩니다.</p>

<p>그 이후에 호출 스택의 모습은 다음과 같습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">호출 스택이 쌓여있는 모습</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">2 번째 호출</td>
      <td style="text-align: center">countdown(2)</td>
    </tr>
    <tr>
      <td style="text-align: center">1 번째 호출</td>
      <td style="text-align: center">countdown(1)</td>
    </tr>
  </tbody>
</table>

:ET